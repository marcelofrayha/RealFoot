{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "link",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "changedBy",
						"type": "address"
					}
				],
				"name": "AuthorizedSendersChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"name": "CancelOracleRequest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "specId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "requester",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "callbackAddr",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes4",
						"name": "callbackFunctionId",
						"type": "bytes4"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "cancelExpiration",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "dataVersion",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "OracleRequest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					}
				],
				"name": "OracleResponse",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "acceptedContract",
						"type": "address"
					}
				],
				"name": "OwnableContractAccepted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "changedBy",
						"type": "address"
					}
				],
				"name": "TargetsUpdatedAuthorizedSenders",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					}
				],
				"name": "acceptAuthorizedReceivers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "ownable",
						"type": "address[]"
					}
				],
				"name": "acceptOwnableContracts",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunc",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "expiration",
						"type": "uint256"
					}
				],
				"name": "cancelOracleRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunc",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "expiration",
						"type": "uint256"
					}
				],
				"name": "cancelOracleRequestByRequester",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable[]",
						"name": "receivers",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "distributeFunds",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "callbackAddress",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunctionId",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "expiration",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "data",
						"type": "bytes32"
					}
				],
				"name": "fulfillOracleRequest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "callbackAddress",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunctionId",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "expiration",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "fulfillOracleRequest2",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizedSenders",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChainlinkToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getExpiryTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "isAuthorizedSender",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onTokenTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "specId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunctionId",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "dataVersion",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "operatorRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "specId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callbackAddress",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "callbackFunctionId",
						"type": "bytes4"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "dataVersion",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "oracleRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ownerForward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ownerTransferAndCall",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					}
				],
				"name": "setAuthorizedSenders",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "senders",
						"type": "address[]"
					}
				],
				"name": "setAuthorizedSendersOn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "ownable",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnableContracts",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "typeAndVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawable",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acceptAuthorizedReceivers(address[],address[])": {
					"params": {
						"senders": "The addresses that are allowed to send updates",
						"targets": "The addresses to set permissions on"
					}
				},
				"acceptOwnableContracts(address[])": {
					"details": "Must be the pending owner on the contract",
					"params": {
						"ownable": "list of addresses of Ownable contracts to accept"
					}
				},
				"cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
					"details": "Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.",
					"params": {
						"callbackFunc": "The requester's specified callback function selector",
						"expiration": "The time of the expiration for the request",
						"payment": "The amount of payment given (specified in wei)",
						"requestId": "The request ID"
					}
				},
				"cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)": {
					"details": "Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.",
					"params": {
						"callbackFunc": "The requester's specified callback function selector",
						"expiration": "The time of the expiration for the request",
						"nonce": "The nonce used to generate the request ID",
						"payment": "The amount of payment given (specified in wei)"
					}
				},
				"constructor": {
					"details": "Sets the LinkToken address for the imported LinkTokenInterface",
					"params": {
						"link": "The address of the LINK token",
						"owner": "The address of the owner"
					}
				},
				"distributeFunds(address[],uint256[])": {
					"details": "Array length must be equal, ETH sent must equal the sum of amounts. A malicious receiver could cause the distribution to revert, in which case it is expected that the address is removed from the list.",
					"params": {
						"amounts": "list of amounts",
						"receivers": "list of addresses"
					}
				},
				"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
					"details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
					"params": {
						"callbackAddress": "The callback address to call for fulfillment",
						"callbackFunctionId": "The callback function ID to use for fulfillment",
						"data": "The data to return to the consuming contract",
						"expiration": "The expiration that the node should respond by before the requester can cancel",
						"payment": "The payment amount that will be released for the oracle (specified in wei)",
						"requestId": "The fulfillment request ID that must match the requester's"
					},
					"returns": {
						"_0": "Status if the external call was successful"
					}
				},
				"fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)": {
					"details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
					"params": {
						"callbackAddress": "The callback address to call for fulfillment",
						"callbackFunctionId": "The callback function ID to use for fulfillment",
						"data": "The data to return to the consuming contract",
						"expiration": "The expiration that the node should respond by before the requester can cancel",
						"payment": "The payment amount that will be released for the oracle (specified in wei)",
						"requestId": "The fulfillment request ID that must match the requester's"
					},
					"returns": {
						"_0": "Status if the external call was successful"
					}
				},
				"getAuthorizedSenders()": {
					"returns": {
						"_0": "array of addresses"
					}
				},
				"getChainlinkToken()": {
					"details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract"
				},
				"isAuthorizedSender(address)": {
					"params": {
						"sender": "The address of the Chainlink node"
					},
					"returns": {
						"_0": "The authorization status of the node"
					}
				},
				"onTokenTransfer(address,uint256,bytes)": {
					"details": "The data payload's first 2 words will be overwritten by the `sender` and `amount` values to ensure correctness. Calls oracleRequest.",
					"params": {
						"amount": "Amount of LINK sent (specified in wei)",
						"data": "Payload of the transaction",
						"sender": "Address of the sender"
					}
				},
				"operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)": {
					"details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
					"params": {
						"callbackFunctionId": "The callback function ID for the response",
						"data": "The extra request parameters",
						"dataVersion": "The specified data version",
						"nonce": "The nonce sent by the requester",
						"payment": "The amount of payment given (specified in wei)",
						"sender": "The sender of the request",
						"specId": "The Job Specification ID"
					}
				},
				"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
					"params": {
						"callbackAddress": "The address the oracle data will be sent to",
						"callbackFunctionId": "The callback function ID for the response",
						"data": "The extra request parameters",
						"dataVersion": "The specified data version",
						"nonce": "The nonce sent by the requester",
						"payment": "The amount of payment given (specified in wei)",
						"specId": "The Job Specification ID"
					}
				},
				"ownerForward(address,bytes)": {
					"details": "Only callable by the owner",
					"params": {
						"data": "to forward",
						"to": "address"
					}
				},
				"ownerTransferAndCall(address,uint256,bytes)": {
					"params": {
						"data": "The extra data to be passed to the receiving contract.",
						"to": "The address to transfer to.",
						"value": "The amount to be transferred."
					},
					"returns": {
						"success": "bool"
					}
				},
				"setAuthorizedSenders(address[])": {
					"params": {
						"senders": "The addresses of the authorized Chainlink node"
					}
				},
				"setAuthorizedSendersOn(address[],address[])": {
					"params": {
						"senders": "The addresses that are allowed to send updates",
						"targets": "The addresses to set permissions on"
					}
				},
				"transferOwnableContracts(address[],address)": {
					"params": {
						"newOwner": "address to transfer ownership to",
						"ownable": "list of addresses to transfer"
					}
				},
				"typeAndVersion()": {
					"returns": {
						"_0": "Type and version string"
					}
				},
				"withdraw(address,uint256)": {
					"details": "The owner of the contract can be another wallet and does not have to be a Chainlink node",
					"params": {
						"amount": "The amount to send (specified in wei)",
						"recipient": "The address to send the LINK token to"
					}
				},
				"withdrawable()": {
					"details": "We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage",
					"returns": {
						"_0": "The amount of withdrawable LINK on the contract"
					}
				}
			},
			"title": "The Chainlink Operator contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptAuthorizedReceivers(address[],address[])": {
					"notice": "Accepts ownership of ownable contracts and then immediately sets the authorized sender list on each of the newly owned contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
				},
				"acceptOwnableContracts(address[])": {
					"notice": "Accept the ownership of an ownable contract. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
				},
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
					"notice": "Allows recipient to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address."
				},
				"cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)": {
					"notice": "Allows requester to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address."
				},
				"constructor": {
					"notice": "Deploy with the address of the LINK token"
				},
				"distributeFunds(address[],uint256[])": {
					"notice": "Distribute funds to multiple addresses using ETH send to this payable function."
				},
				"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
					"notice": "Called by the Chainlink node to fulfill requests"
				},
				"fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)": {
					"notice": "Called by the Chainlink node to fulfill requests with multi-word support"
				},
				"getAuthorizedSenders()": {
					"notice": "Retrieve a list of authorized senders"
				},
				"getChainlinkToken()": {
					"notice": "Returns the address of the LINK token"
				},
				"isAuthorizedSender(address)": {
					"notice": "Use this to check if a node is authorized for fulfilling requests"
				},
				"onTokenTransfer(address,uint256,bytes)": {
					"notice": "Called when LINK is sent to the contract via `transferAndCall`"
				},
				"operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)": {
					"notice": "Creates the Chainlink request"
				},
				"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
					"notice": "Creates the Chainlink request. This is a backwards compatible API with the Oracle.sol contract, but the behavior changes because callbackAddress is assumed to be the same as the request sender."
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"ownerForward(address,bytes)": {
					"notice": "Forward a call to another contract"
				},
				"ownerTransferAndCall(address,uint256,bytes)": {
					"notice": "Interact with other LinkTokenReceiver contracts by calling transferAndCall"
				},
				"setAuthorizedSenders(address[])": {
					"notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
				},
				"setAuthorizedSendersOn(address[],address[])": {
					"notice": "Sets the fulfillment permission for"
				},
				"transferOwnableContracts(address[],address)": {
					"notice": "Transfer the ownership of ownable contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address, pending."
				},
				"typeAndVersion()": {
					"notice": "The type and version of this contract"
				},
				"withdraw(address,uint256)": {
					"notice": "Allows the node operator to withdraw earned LINK to a given address"
				},
				"withdrawable()": {
					"notice": "Displays the amount of LINK that is available for the node operator to withdraw"
				}
			},
			"notice": "Node operators can deploy this contract to fulfill requests sent to them",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@chainlink/contracts/src/v0.7/Operator.sol": "Operator"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@chainlink/contracts/src/v0.7/AuthorizedReceiver.sol": {
			"keccak256": "0xd5c4c5246744c9c3d2445298e5bdc38ff4c2ca744ca4167cef01ea11c09ba5c7",
			"license": "MIT",
			"urls": [
				"bzz-raw://665cfac376f9fc7554788118a491066d71f9e5bd6f3114789d449d001cc1aff3",
				"dweb:/ipfs/QmS3JbdU5Z94wUhNCNwG4bbGuxLJBNjaqZ2XunEvJ9tqNr"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/ConfirmedOwner.sol": {
			"keccak256": "0xba5a8452dcb14e3fecb9f39e415db6cd8b45cbe0a03899febe4f5e715396a9cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://321c4997e9d7248386b6946ce113ba586ab8f2bf57bb793c07abf0a5e9f80b76",
				"dweb:/ipfs/QmPMUYFm5iUQcEehh1woqH4jNWy2sEPU1fPSVUc76NJrRR"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0xd9c444260e0ed47bfcf49f269fa52af499e6707b741ae49c7d79e49168c9e4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://36aee63c481b52c4420d08135eef232102cf6d68435a3b00b21c87d1f1e2b050",
				"dweb:/ipfs/QmcAXNtqSJvVmsRdgbYfxqDtUZXp8UKK4kJg8C3cVf9FUo"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/LinkTokenReceiver.sol": {
			"keccak256": "0x762830492b4403d32f77cdb54978a45ae972614fe0b4b93f7e1cc3892b145fa6",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c51ba385a59381a6475044876ce4a15de30aab8b85dd3795071ca661f207a36",
				"dweb:/ipfs/Qma18matGbVrp2NYpM8HmYwELnC2988L3bmdNFBLXYfwGx"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/Operator.sol": {
			"keccak256": "0xddb168ef7571217be8079a4bc9e9354e0f63cd2288cf2fa1347c66a63b70ac49",
			"license": "MIT",
			"urls": [
				"bzz-raw://72d663a5d1f8432301b351303af609cbbf82109a5df1ef872cb2481916e7c305",
				"dweb:/ipfs/QmZxSKRxdamxWgyqqyCKhMCxXrP8dzbRabZGDMDMeFxRms"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/AuthorizedReceiverInterface.sol": {
			"keccak256": "0x4276ccbc637409ab07d9baab0b72806aac938d5f180fe8bc186f64d5d376ba4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://71a8ed40faa2f8fea03a8e55c6534c22bec374d134af2ea9a4a1f852b959b0c3",
				"dweb:/ipfs/QmYc4WRpNBMr2aC2srcdyCdhGcCEPt1k7LRY8Z3YnDAbwM"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol": {
			"keccak256": "0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a71019411365d5e12056b55669366926caf128e60584269f8bc6715ba93e756",
				"dweb:/ipfs/QmaRS5tzQcSAkoFaj6aSM4aywiK7mgyVg9Xv9c9jii9rv8"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/LinkTokenInterface.sol": {
			"keccak256": "0x61bb541e43d816b7a6955cb659fcaf6d522fa5f376a4b18b8198268f1fb0b593",
			"license": "MIT",
			"urls": [
				"bzz-raw://2856afef8af9bc74252627e7ce0272e8042dc1116b627ae3c77770a030382a06",
				"dweb:/ipfs/QmdS98aNUiraLv8SomC2dhkpSWvN9xPYP32E9K8zjCNqBN"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/OperatorInterface.sol": {
			"keccak256": "0xdaf32685096f5656e06d42a0b4b21b40d6cae01785bd6c422d3cd5205490ebf5",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab093d585898036fdff4ce00427630111b3259249ee4b69f28da8c1f30ff9958",
				"dweb:/ipfs/QmSp1d9FGNZKg1oj9QWWD7a8njmD4akwCa1HJYdDabLtzp"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/OracleInterface.sol": {
			"keccak256": "0x7ad27eb013cd09554025f0db7a7db9eb1eb020f948fe891d9ed8c0215680f498",
			"license": "MIT",
			"urls": [
				"bzz-raw://51425673f2a1fe1d3e4f5a9a8ae04e2ada2e50d627f21eb6bba175588ac17fcc",
				"dweb:/ipfs/QmQk1kCQbRWuUcv3dffsMZupBLHJDh51pp7WmT94bSarCs"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/OwnableInterface.sol": {
			"keccak256": "0x5b0ba0302a06c80ff88368c02dab44a0d9b735a599ba6ff905284044f02f2932",
			"license": "MIT",
			"urls": [
				"bzz-raw://0163141ba0751e2f2cfd064e7bc4df7b0d586dafd4df2bff86a10d12f0c85ea2",
				"dweb:/ipfs/QmUUxa983fJ6sRJEeBqnXsZ9XVu88KsL4fdhGTZQqVrwmb"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/interfaces/WithdrawalInterface.sol": {
			"keccak256": "0xe730b947ff2acdcc00dd57dcf37fb239ef1aef353e0cf8b128623ebfa43ce350",
			"license": "MIT",
			"urls": [
				"bzz-raw://ae06cc469a74f3c27e8e4af62abda8e7b566ee147dd12a18237f5addef74908b",
				"dweb:/ipfs/QmdPbKPkai966nWbcoRzBBELqJXfQ4SXkeQ1xVEwQL3xvs"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/vendor/Address.sol": {
			"keccak256": "0xe596fbc1f57dd1ab73a9ba7f7c7660b3989f436b91c0a47773c67a0f357c20a7",
			"license": "MIT",
			"urls": [
				"bzz-raw://87e5a472fa6a176b61a550808ec99794188c97cbfd0255752c8eb960b80f8736",
				"dweb:/ipfs/QmR1Uh4JUKksnScBK1YHfYTF8Z6RaXgjjMoQDDK3S3m8rm"
			]
		},
		".deps/npm/@chainlink/contracts/src/v0.7/vendor/SafeMathChainlink.sol": {
			"keccak256": "0x4af4b72feea9a64da1ae91c5ed7e2dfe8ddc39924a6ca97c098dd90c5e4c8cf5",
			"license": "MIT",
			"urls": [
				"bzz-raw://fef42537c7b6bd092335072d0ccf8ff9d69349d928d6dad9b1175b514c2340ec",
				"dweb:/ipfs/QmQfcL5FVnygoAeoUhT4hqWCeQ4KG3FekBaR36kxZvbvAm"
			]
		}
	},
	"version": 1
}